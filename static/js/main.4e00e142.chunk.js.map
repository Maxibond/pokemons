{"version":3,"sources":["components/PokemonList.js","components/Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["PokemonList","props","state","pokemons","next","previous","fetch","response","json","result","this","setState","results","map","p","pokemonID","url","tmp","split","length","getPokemonID","key","name","to","Component","Pokemon","id","match","params","loading","base_experience","weight","types","t","className","type","slot","App","basename","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAiDeA,M,YA3CX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,SAAU,GACVC,KAAM,GACNC,SAAU,IANC,E,mNAWQC,MAAM,sC,cAAvBC,E,gBACeA,EAASC,O,OAAxBC,E,OACNC,KAAKC,SAAS,CACVR,SAAUM,EAAOG,U,qIAKrB,OACI,6BACI,wCAEIF,KAAKR,MAAMC,SAASU,KAAI,SAAAC,GACpB,IAAMC,EAa9B,SAAsBC,GAClB,IAAMC,EAAMD,EAAIE,MAAM,KAEtB,OADWD,EAAIA,EAAIE,OAAS,GAfUC,CAAaN,EAAEE,KACjC,OACI,yBAAKK,IAAKP,EAAEQ,MACR,kBAAC,IAAD,CAAMC,GAAE,mBAAcR,IAAcD,EAAEQ,e,GA7B5CE,a,ikBC4DXC,M,YA1DX,WAAYxB,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTwB,GAAIzB,EAAM0B,MAAMC,OAAOF,GACvBG,SAAS,GALE,E,mNAUQvB,MAAM,qCAAD,OAAsCI,KAAKR,MAAMwB,K,cAAvEnB,E,gBACeA,EAASC,O,OAAxBC,E,OAENC,KAAKC,SAAL,KACOD,KAAKR,MADZ,GAEOO,EAFP,CAGIoB,SAAS,K,qIAIP,IAAD,EAODnB,KAAKR,MALLwB,EAFC,EAEDA,GACAJ,EAHC,EAGDA,KACAQ,EAJC,EAIDA,gBACAC,EALC,EAKDA,OACAC,EANC,EAMDA,MAGJ,OAAItB,KAAKR,MAAM2B,QACJ,0CAIP,6BACI,gCAAMH,EAAN,IAAWJ,GAEX,uCAAaQ,GACb,sCAAYC,GAEZ,qCACIC,EAAMnB,KAAI,SAAAoB,GACN,OAAO,0BAAMC,UAAW,SAYxBC,EAZiDF,EAAEE,KAAKb,KAatE,QAAN,OAAea,IAboEd,IAAKY,EAAEG,MAAOH,EAAEE,KAAKb,MAY5G,IAAwBa,MAPR,kBAAC,IAAD,CAAMZ,GAAG,KAAT,a,GAjDMC,a,MCwBPa,MArBf,WACE,OACE,kBAAC,IAAD,CAAeC,SAAS,aACtB,yBAAKJ,UAAU,OAEf,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOK,KAAK,qBAAoBC,UAAWf,IAE3C,kBAAC,IAAD,CAAOgB,OAAK,EAACF,KAAK,KAChB,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOA,KAAK,KACV,uDAA4B,kBAAC,IAAD,CAAMhB,GAAG,KAAT,cCRpBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2DCZNmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4e00e142.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\nclass PokemonList extends Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = { \n            pokemons: [],\n            next: \"\",\n            previous: \"\",\n        }\n    }\n\n    async componentDidMount() {\n        const response = await fetch(\"https://pokeapi.co/api/v2/pokemon/\");\n        const result = await response.json();\n        this.setState({\n            pokemons: result.results\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Pokemons</h1> \n                {\n                    this.state.pokemons.map(p => {\n                        const pokemonID = getPokemonID(p.url);\n                        return (\n                            <div key={p.name}>\n                                <Link to={`/pokemon/${pokemonID}`}>{p.name}</Link>\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nfunction getPokemonID(url) {\n    const tmp = url.split('/');\n    const id = tmp[tmp.length - 2];\n    return id;\n}\n\nexport default PokemonList;\n","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\n\n\nclass Pokemon extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: props.match.params.id,\n            loading: true\n        };\n    }\n\n    async componentDidMount() {\n        const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${this.state.id}`);\n        const result = await response.json();\n\n        this.setState({\n            ...this.state,\n            ...result,\n            loading: false,\n        });\n    }\n\n    render() {\n        const {\n            id,\n            name,\n            base_experience,\n            weight,\n            types\n        } = this.state;\n\n        if (this.state.loading) {\n            return <h1>loading...</h1>;\n        }\n\n        return (\n            <div>\n                <h1>#{id} {name}</h1>\n\n                <p>Base XP: {base_experience}</p>\n                <p>Weight: {weight}</p>\n\n                <p>Types: {\n                    types.map(t => {\n                        return <span className={\"type \" + getClassByType(t.type.name)} key={t.slot}>{t.type.name}</span>\n                    })\n                } \n                </p>\n\n                <Link to=\"/\">Back</Link>\n\n            </div>\n        );\n    }\n}\n\nfunction getClassByType(type) {\n    return `type-${type}`\n}\n\nexport default Pokemon;","import React from 'react';\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport PokemonList from './components/PokemonList'\nimport Pokemon from './components/Pokemon';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"/pokemons\">\n      <div className=\"App\">\n\n      <Switch>\n          <Route path=\"/pokemon/:id(\\d+)\" component={Pokemon} />\n\n          <Route exact path=\"/\">\n            <PokemonList />\n          </Route>\n\n          <Route path=\"/\">\n            <h1>Not found sorry man go  <Link to=\"/\">here</Link></h1>\n          </Route>\n      </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}